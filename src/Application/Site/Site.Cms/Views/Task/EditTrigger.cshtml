@{
    ViewBag.Title = "编辑任务执行计划";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using MicBeach.Web.Mvc
@using MicBeach.Util.Extension
@using MicBeach.ViewModel.Task
@using MicBeach.CTask
@using MicBeach.CTask.Util;
@model TriggerViewModel
@{
    bool isAdd = Model.Id.IsNullOrEmpty();
    Array configItems = Enum.GetValues(typeof(TaskTriggerExpressionItem));
    Array weekValues = Enum.GetValues(typeof(TaskWeek));
    List<SelectListItem> weekSelectItems = new List<SelectListItem>();
    foreach (TaskWeek week in weekValues)
    {
        weekSelectItems.Add(new SelectListItem()
        {
            Text = week.ToString(),
            Value = ((int)week).ToString()
        });
    }

    List<SelectListItem> conditionEnableiItems = new List<SelectListItem>()
    {
        new SelectListItem()
    {
        Text="包含",
        Value="true"
    },
                new SelectListItem()
    {
        Text="排除",
        Value="false"
    }
    };
    List<ExpressionItemViewModel> expressionItems = new List<ExpressionItemViewModel>();
    if (Model is ExpressionTriggerViewModel)
    {
        ExpressionTriggerViewModel expressionTrigger = Model as ExpressionTriggerViewModel;
        if (expressionTrigger != null && !expressionTrigger.ExpressionItems.IsNullOrEmpty())
        {
            expressionItems.AddRange(expressionTrigger.ExpressionItems);
        }
    }

    SimpleTriggerViewModel simpleTrigger = Model as SimpleTriggerViewModel;
    int conditionYearDayCount = 0;
    int conditionMonthDayCount = 0;
    int conditionFullDateCount = 0;
    int conditionWeekCount = 0;
}
<style>
    .tr_type, .config-val-input, .tr_condition, .tr_template, #tr_applytoserver {
        display: none;
    }

    .input_mt_16 {
        margin-top: 16px;
    }

    .form-con .form_table td .pd_l_5 {
        padding-left: 5px;
    }

    .h_15 {
        height: 15px;
    }
</style>
<div id="pc-body">
    <div id="pc-body-inner">
        <div class="form-con" id="home">
            @using (Ajax.BeginForm("EditTrigger", "Task", new AjaxOptions() { HttpMethod = "Post", OnSuccess = "SuccessCallback", OnFailure = "FailedCallback" }, new { id = "formvalide" }))
            {
                @Html.Hidden("Id", null, new { id = "Id" })
                @Html.HiddenFor(c => c.Job.Id)
                <table cellpadding="0" cellspacing="0" class="form_table">
                    <tr>
                        <td class="txt-right tit">@Html.LabelFor(c => c.Job)</td>
                        <td>
                            【@(Model.Job?.Name)】
                        </td>
                    </tr>
                    <tr>
                        <td class="txt-right tit">* @Html.LabelFor(c => c.Name)</td>
                        <td>
                            @Html.TextBoxFor(a => a.Name, new { @class = "form-control w-200" })
                            @Html.DefaultValidationMessageFor(a => a.Name, "", new { @class = "tip prompt" })
                        </td>
                    </tr>
                    <tr>
                        <td class="txt-right tit">* @Html.LabelFor(c => c.Type)</td>
                        <td>
                            @Html.EnumToSelect(a => a.Type, TaskTriggerType.简单, new { @class = "form-control w-200" }, "", "选择计划类型", ((int)Model.Type).ToString())
                            @Html.DefaultValidationMessageFor(a => a.Type, "", new { @class = "tip prompt" })
                        </td>
                    </tr>
                    <tr class="tr_type" id="tr_type_simple">
                        <td class="txt-right tit">&nbsp;</td>
                        <td><span class="radiogroup">@Html.CheckBox("RepeatForever", (simpleTrigger == null ? false : simpleTrigger.RepeatForever))<label class="txt">持续重复执行</label></span><span class="" id="repeat_countinputgroup">重复次数：@Html.TextBox("RepeatCount", (simpleTrigger == null ? "" : simpleTrigger.RepeatCount.ToString()), new { @class = "form-control w-100" })</span><span class="">&nbsp;&nbsp;间隔时间：@Html.TextBox("RepeatInterval", (simpleTrigger == null ? "" : simpleTrigger.RepeatInterval.ToString()), new { @class = "form-control w-100" }) 毫秒</span></td>
                    </tr>
                    <tr class="tr_type" id="tr_type_expression">
                        <td class="txt-right tit">&nbsp;</td>
                        <td>
                            <table>
                                <tr>
                                    <th width="100px">配置项</th>
                                    <th width="150px">类型</th>
                                    <th class="pd_l_5">值</th>
                                </tr>
                                @foreach (TaskTriggerExpressionItem item in configItems)
                                {
                                    List<TaskTriggerExpressionItemConfigType> configTypes = TaskUtil.GetExpressionItemConfigTypes(item).OrderBy(c => c).ToList();
                                    var nowItem = expressionItems.FirstOrDefault(c => c.Option == item) ?? new ExpressionItemViewModel();
                                    var arrayValues = nowItem.ArrayValue ?? new List<string>(0);
                                    string itemName = item.ToString();
                                    <tr>
                                        <td>@itemName</td>
                                        <td>

                                            <select class="form-control w-150 select_config_itemtype_extype" name="Item_ValueType_@((int)item)">
                                                @foreach (var type in configTypes)
                                                {
                                                    <option @(nowItem.ValueType == type ? "selected='selected'" : "") value="@((int)type)">@type.ToString()</option>
                                                }
                                            </select>
                                        </td>
                                        <td style="padding-left:5px">
                                            @if (item == TaskTriggerExpressionItem.星期)
                                            {
                                                <div class="config-val-input input_mt_16 config-val-input_@((int)TaskTriggerExpressionItemConfigType.集合值)">
                                                    <div>
                                                        @foreach (TaskWeek week in weekValues)
                                                        {
                                                            <span class="radiogroup">@Html.CheckBox("Item_Week_ArrayVal", arrayValues.Contains(((int)week).ToString()), new { value = (int)week })<label class="txt">@week.ToString()</label></span>
                                                        }
                                                    </div>
                                                </div>
                                                <div class="config-val-input config-val-input_@((int)TaskTriggerExpressionItemConfigType.范围值)">
                                                    <div>从 @Html.EnumToSelect("Item_BeginValue_" + (int)item, TaskWeek.星期一, new { @class = "form-control w-100" }, selectedValue: (TaskWeek)nowItem.BeginValue) 到 @Html.EnumToSelect("Item_EndValue_" + (int)item, TaskWeek.星期一, new { @class = "form-control w-100" }, selectedValue: (TaskWeek)nowItem.EndValue)</div>
                                                </div>
                                                <div class="config-val-input config-val-input_@((int)TaskTriggerExpressionItemConfigType.开始_间隔)">
                                                    <div>从 @Html.EnumToSelect("Item_IntervalBeginValue_" + (int)item, TaskWeek.星期一, new { @class = "form-control w-100" }, selectedValue: (TaskWeek)nowItem.BeginValue) 开始,间隔 @Html.TextBox("Item_IntervalSplitValue_" + (int)item, nowItem.EndValue, new { @class = "form-control w-100" }) 天</div>
                                                </div>
                                                <div class="config-val-input config-val-input_@((int)TaskTriggerExpressionItemConfigType.每月个最后一个星期N)">
                                                    <div>每月最后一个 @Html.EnumToSelect("Item_MonthLastWeekDay_" + (int)item, TaskWeek.星期一, new { @class = "form-control w-100" }, selectedValue: (TaskWeek)nowItem.BeginValue)</div>
                                                </div>
                                                <div class="config-val-input config-val-input_@((int)TaskTriggerExpressionItemConfigType.本月第M个星期N)">
                                                    <div>本月第 @Html.TextBox("Item_MonthWhichWeekDay_Num_" + (int)item, nowItem.BeginValue, new { @class = "form-control w-100" }) 个 @Html.EnumToSelect("Item_MonthWhichWeekDay_" + (int)item, TaskWeek.星期一, new { @class = "form-control w-100" }, selectedValue: (TaskWeek)nowItem.EndValue)</div>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="config-val-input input_mt_16 config-val-input_@((int)TaskTriggerExpressionItemConfigType.集合值)">
                                                    <div>@Html.TextBox("Item_ArrayValue_" + (int)item, string.Join(",", arrayValues), new { @class = "form-control w-200" })</div>
                                                    <div>使用逗号(",")分割多个值</div>
                                                </div>
                                                <div class="config-val-input config-val-input_@((int)TaskTriggerExpressionItemConfigType.范围值)">
                                                    <div>从 @Html.TextBox("Item_BeginValue_" + (int)item, nowItem.BeginValue, new { @class = "form-control w-100" })@itemName 到 @Html.TextBox("Item_EndValue_" + (int)item, nowItem.EndValue, new { @class = "form-control w-100" })@itemName</div>
                                                </div>
                                                <div class="config-val-input config-val-input_@((int)TaskTriggerExpressionItemConfigType.开始_间隔)">
                                                    <div>从第 @Html.TextBox("Item_IntervalBeginValue_" + (int)item, nowItem.BeginValue, new { @class = "form-control w-100" })@itemName 开始,间隔 @Html.TextBox("Item_IntervalSplitValue_" + (int)item, nowItem.EndValue, new { @class = "form-control w-100" })@itemName</div>
                                                </div>
                                                if (item == TaskTriggerExpressionItem.日)
                                                {
                                                    <div class="config-val-input config-val-input_@((int)TaskTriggerExpressionItemConfigType.每月倒数第N天)">
                                                        <div>每月倒数第 @Html.TextBox("Item_MonthEndDay_" + (int)item, nowItem.BeginValue, new { @class = "form-control w-200" }) 天</div>
                                                    </div>
                                                }
                                            }
                                        </td>
                                    </tr>
                                }
                            </table>
                        </td>
                    </tr>

                    <tr>
                        <td class="txt-right tit">@Html.LabelFor(c => c.Condition.Type)</td>
                        <td>
                            @Html.EnumToSelect(a => a.Condition.Type, TaskTriggerConditionType.不限制, new { @class = "form-control w-200" },selectedValue:(Model.Condition?.Type.GetHashCode()).ToString() )
                            @Html.DefaultValidationMessageFor(a => a.Condition.Type, "指定需要排除或特殊执行的日期时间货策略", new { @class = "tip prompt" })
                        </td>
                    </tr>

                    <tr class="tr_condition" id="tr_condition_everyyearday">
                        <td class="txt-right tit"><div class="h_15"></div><button type="button" class="button btn_green btn-xs" id="btn_addcondition_everyyearday"><i class="glyphicon glyphicon-plus"></i> 添加</button></td>
                        <td>
                            <table cellpadding="0" cellspacing="0">
                                <thead>
                                    <tr><th width="100px">月份</th><th width="100px" class="pd_l_5">日期</th><th class="pd_l_5" width="100px">方式</th><th class="pd_l_5">操作</th></tr>
                                    <tr class="tr_template" id="tr_template_everyyearday">
                                        <td>@Html.TextBox("yearday_month_input_tem", "", new { @class = "form-control yearday_month_input w-100" })</td>
                                        <td class="pd_l_5">@Html.TextBox("yearday_day_input_tem", "", new { @class = "form-control yearday_day_input w-100" })</td>
                                        <td class="pd_l_5">@Html.DropDownList("yearday_enable_tem", conditionEnableiItems, new { @class = "form-control yearday_enable w-100" })</td>
                                        <td class="pd_l_5"><button type="button" class="button btn_red btn-xs btn_delete_conditionitem"><i class="glyphicon glyphicon-trash"></i> 删除</button></td>
                                    </tr>
                                </thead>
                                <tbody id="condition_everyyearday_tbody">
                                    @{
                                        TriggerAnnualConditionViewModel yearCondition = Model.Condition as TriggerAnnualConditionViewModel;
                                        if (yearCondition != null && !yearCondition.Days.IsNullOrEmpty())
                                        {
                                            foreach (var yearDay in yearCondition.Days)
                                            {
                                                conditionYearDayCount++;
                                                conditionEnableiItems.ForEach(c => c.Selected = c.Value == yearDay.Include.ToString().ToLower());
                                                <tr>
                                                    <td>@Html.TextBox("Condition_YearDay_Month-"+ conditionYearDayCount, yearDay.Month, new { @class = "form-control w-100"})</td>
                                                    <td class="pd_l_5">@Html.TextBox("Condition_YearDay_Day-"+ conditionYearDayCount, yearDay.Day, new { @class = "form-control w-100"})</td>
                                                    <td class="pd_l_5">@Html.DropDownList("Condition_YearDay_Enable-"+ conditionYearDayCount, conditionEnableiItems, new { @class = "form-control w-100"})</td>
                                                    <td class="pd_l_5"><button type="button" class="button btn_red btn-xs btn_delete_conditionitem"><i class="glyphicon glyphicon-trash"></i> 删除</button></td>
                                                </tr>
                                            }
                                            conditionEnableiItems.ForEach(c => c.Selected = false);
                                        }
                                    }
                                </tbody>
                            </table>
                        </td>
                    </tr>

                    <tr class="tr_condition" id="tr_condition_everymonthday">
                        <td class="txt-right tit"><div class="h_15"></div><button type="button" class="button btn_green btn-xs" id="btn_addcondition_everymonthday"><i class="glyphicon glyphicon-plus"></i> 添加</button></td>
                        <td>
                            <table cellpadding="0" cellspacing="0">
                                <thead>
                                    <tr><th width="100px">日期</th><th class="pd_l_5" width="100px">方式</th><th class="pd_l_5">操作</th></tr>
                                    <tr class="tr_template" id="tr_template_everymonthday">
                                        <td>@Html.TextBox("monthday_day_input_tem", "", new { @class = "form-control monthday_day_input w-100" })</td>
                                        <td class="pd_l_5">@Html.DropDownList("monthday_enable_tem", conditionEnableiItems, new { @class = "form-control monthday_enable w-100" })</td>
                                        <td class="pd_l_5"><button type="button" class="button btn_red btn-xs btn_delete_conditionitem"><i class="glyphicon glyphicon-trash"></i> 删除</button></td>
                                    </tr>
                                </thead>
                                <tbody id="condition_everymonthday_tbody">
                                    @{
                                        TriggerMonthlyConditionViewModel monthCondition = Model.Condition as TriggerMonthlyConditionViewModel;
                                        if (monthCondition != null && !monthCondition.Days.IsNullOrEmpty())
                                        {
                                            foreach (var monthDay in monthCondition.Days)
                                            {
                                                conditionMonthDayCount++;
                                                conditionEnableiItems.ForEach(c => c.Selected = c.Value == monthDay.Include.ToString().ToLower());
                                                <tr>
                                                    <td>@Html.TextBox("Condition_MonthDay_Day-"+ conditionMonthDayCount, monthDay.Day, new { @class = "form-control w-100"})</td>
                                                    <td class="pd_l_5">@Html.DropDownList("Condition_MonthDay_Enable-"+ conditionMonthDayCount, conditionEnableiItems, new { @class = "form-control w-100"})</td>
                                                    <td class="pd_l_5"><button type="button" class="button btn_red btn-xs btn_delete_conditionitem"><i class="glyphicon glyphicon-trash"></i> 删除</button></td>
                                                </tr>
                                            }
                                            conditionEnableiItems.ForEach(c => c.Selected = false);
                                        }
                                    }
                                </tbody>
                            </table>
                        </td>
                    </tr>

                    <tr class="tr_condition" id="tr_condition_fulldate">
                        <td class="txt-right tit"><div class="h_15"></div><button type="button" class="button btn_green btn-xs" id="btn_addcondition_fulldate"><i class="glyphicon glyphicon-plus"></i> 添加</button></td>
                        <td>
                            <table cellpadding="0" cellspacing="0">
                                <thead>
                                    <tr><th width="100px">日期</th><th class="pd_l_5" width="100px">方式</th><th class="pd_l_5">操作</th></tr>
                                    <tr class="tr_template" id="tr_template_fulldate">
                                        <td>@Html.TextBox("fulldate_input_tem", "", new { @class = "form-control fulldate_input Date w-100" })</td>
                                        <td class="pd_l_5">@Html.DropDownList("fulldate_enable_tem", conditionEnableiItems, new { @class = "form-control fulldate_enable w-100" })</td>
                                        <td class="pd_l_5"><button type="button" class="button btn_red btn-xs btn_delete_conditionitem"><i class="glyphicon glyphicon-trash"></i> 删除</button></td>
                                    </tr>
                                </thead>
                                <tbody id="condition_fulldate_tbody">
                                    @{
                                        TriggerFullDateConditionViewModel fullDateCondition = Model.Condition as TriggerFullDateConditionViewModel;
                                        if (fullDateCondition != null && !fullDateCondition.Dates.IsNullOrEmpty())
                                        {
                                            foreach (var fullDate in fullDateCondition.Dates)
                                            {
                                                conditionFullDateCount++;
                                                conditionEnableiItems.ForEach(c => c.Selected = c.Value == fullDate.Include.ToString().ToLower());
                                                <tr>
                                                    <td>@Html.TextBox("Condition_FullDate_Date-"+ conditionFullDateCount, fullDate.Date.ToString("yyyy-MM-dd"), new { @class = "form-control Date w-100"})</td>
                                                    <td class="pd_l_5">@Html.DropDownList("Condition_FullDate_Enable-"+ conditionFullDateCount, conditionEnableiItems, new { @class = "form-control w-100"})</td>
                                                    <td class="pd_l_5"><button type="button" class="button btn_red btn-xs btn_delete_conditionitem"><i class="glyphicon glyphicon-trash"></i> 删除</button></td>
                                                </tr>
                                            }
                                            conditionEnableiItems.ForEach(c => c.Selected = false);
                                        }
                                    }
                                </tbody>
                            </table>
                        </td>
                    </tr>

                    <tr class="tr_condition" id="tr_condition_timerange">
                        <td class="txt-right tit">&nbsp;</td>
                        <td>
                            <table cellpadding="0" cellspacing="0">
                                <tr><th width="100px">开始时间</th><th class="pd_l_5" width="100px">结束时间</th><th class="pd_l_5">方式</th></tr>
                                <tr>
                                    @{
                                        TriggerDailyConditionViewModel dailyCondition = Model.Condition as TriggerDailyConditionViewModel;
                                    }
                                    <td>@Html.TextBox("Condition_TimeRange_BeginTime", dailyCondition == null ? "" : dailyCondition.BeginTime, new { @class = "form-control w-100" })</td>
                                    <td class="pd_l_5">@Html.TextBox("Condition_TimeRange_EndTime", dailyCondition == null ? "" : dailyCondition.EndTime, new { @class = "form-control w-100" })</td>
                                    <td class="pd_l_5"><span class="radiogroup">@Html.CheckBox("Condition_TimeRange_Inversion", dailyCondition == null ? false : dailyCondition.Inversion)<label class="txt">反转时间</label></span></td>
                                </tr>
                            </table>
                        </td>
                    </tr>

                    <tr class="tr_condition" id="tr_condition_week">
                        <td class="txt-right tit"><div class="h_15"></div><button type="button" class="button btn_green btn-xs" id="btn_addcondition_week"><i class="glyphicon glyphicon-plus"></i> 添加</button></td>
                        <td>
                            <table cellpadding="0" cellspacing="0">
                                <thead>
                                    <tr><th width="100px">星期</th><th class="pd_l_5" width="100px">方式</th><th class="pd_l_5">操作</th></tr>
                                    <tr class="tr_template" id="tr_template_fullweek">
                                        <td>@Html.DropDownList("weekcondition_day_input_tem", weekSelectItems, new { @class = "form-control weekcondition_day_input w-100" })</td>
                                        <td class="pd_l_5">@Html.DropDownList("weekcondition_enable_tem", conditionEnableiItems, new { @class = "form-control weekcondition_enable w-100" })</td>
                                        <td class="pd_l_5"><button type="button" class="button btn_red btn-xs btn_delete_conditionitem"><i class="glyphicon glyphicon-trash"></i> 删除</button></td>
                                    </tr>
                                </thead>
                                <tbody id="condition_week_body">
                                    @{
                                        TriggerWeeklyConditionViewModel weeklyCondition = Model.Condition as TriggerWeeklyConditionViewModel;
                                        if (weeklyCondition != null && !weeklyCondition.Days.IsNullOrEmpty())
                                        {
                                            foreach (var weekDay in weeklyCondition.Days)
                                            {
                                                conditionWeekCount++;
                                                conditionEnableiItems.ForEach(c => c.Selected = c.Value == weekDay.Include.ToString().ToLower());
                                                <tr>
                                                    <td>@Html.EnumToSelect("Condition_Week_Day-"+ conditionWeekCount, TaskWeek.星期一, new { @class = "form-control w-100"},selectedValue:(TaskWeek)weekDay.Day )</td>
                                                    <td class="pd_l_5">@Html.DropDownList("Condition_Week_Enable-"+ conditionWeekCount, conditionEnableiItems, new { @class = "form-control w-100"})</td>
                                                    <td class="pd_l_5"><button type="button" class="button btn_red btn-xs btn_delete_conditionitem"><i class="glyphicon glyphicon-trash"></i> 删除</button></td>
                                                </tr>
                                            }
                                            conditionEnableiItems.ForEach(c => c.Selected = false);
                                        }
                                    }
                                </tbody>
                            </table>
                        </td>
                    </tr>

                    <tr class="tr_condition" id="tr_condition_expression">
                        <td class="txt-right tit">&nbsp;</td>
                        <td>
                            <table>
                                <tr>
                                    <th width="100px">配置项</th>
                                    <th width="150px">类型</th>
                                    <th class="pd_l_5">值</th>
                                </tr>
                                @{
                                    TriggerExpressionConditionViewModel expressionCondition = Model.Condition as TriggerExpressionConditionViewModel;
                                    List<ExpressionItemViewModel> conditionExpressionItems = null;
                                    if (expressionCondition != null && !expressionCondition.ExpressionItems.IsNullOrEmpty())
                                    {
                                        conditionExpressionItems = expressionCondition.ExpressionItems;
                                    }
                                    conditionExpressionItems = conditionExpressionItems ?? new List<ExpressionItemViewModel>(0);
                                    foreach (TaskTriggerExpressionItem item in configItems)
                                    {
                                        List<TaskTriggerExpressionItemConfigType> configTypes = TaskUtil.GetExpressionItemConfigTypes(item).OrderBy(c => c).ToList();
                                        var nowItem = expressionItems.FirstOrDefault(c => c.Option == item) ?? new ExpressionItemViewModel();
                                        var arrayValues = nowItem.ArrayValue ?? new List<string>(0);
                                        string itemName = item.ToString();
                                        <tr>
                                            <td>@itemName</td>
                                            <td>

                                                <select class="form-control w-150 select_config_itemtype_extype" name="Condition_ValueType_@((int)item)">
                                                    @foreach (var type in configTypes)
                                                    {
                                                        <option @(nowItem.ValueType == type ? "selected='selected'" : "") value="@((int)type)">@type.ToString()</option>
                                                    }
                                                </select>
                                            </td>
                                            <td style="padding-left:5px">
                                                @if (item == TaskTriggerExpressionItem.星期)
                                                {
                                                    <div class="config-val-input input_mt_16 config-val-input_@((int)TaskTriggerExpressionItemConfigType.集合值)">
                                                        <div>
                                                            @foreach (TaskWeek week in weekValues)
                                                            {
                                                                <span class="radiogroup">@Html.CheckBox("Condition_Week_ArrayVal", arrayValues.Contains(((int)week).ToString()), new { value = (int)week })<label class="txt">@week.ToString()</label></span>
                                                            }
                                                        </div>
                                                    </div>
                                                    <div class="config-val-input config-val-input_@((int)TaskTriggerExpressionItemConfigType.范围值)">
                                                        <div>从 @Html.EnumToSelect("Condition_BeginValue_" + (int)item, TaskWeek.星期一, new { @class = "form-control w-100" }, selectedValue: (TaskWeek)nowItem.BeginValue) 到 @Html.EnumToSelect("Condition_EndValue_" + (int)item, TaskWeek.星期一, new { @class = "form-control w-100" }, selectedValue: (TaskWeek)nowItem.EndValue)</div>
                                                    </div>
                                                    <div class="config-val-input config-val-input_@((int)TaskTriggerExpressionItemConfigType.开始_间隔)">
                                                        <div>从 @Html.EnumToSelect("Condtion_IntervalBeginValue_" + (int)item, TaskWeek.星期一, new { @class = "form-control w-100" }, selectedValue: (TaskWeek)nowItem.BeginValue) 开始,间隔 @Html.TextBox("Condition_IntervalSplitValue_" + (int)item, nowItem.EndValue, new { @class = "form-control w-100" }) 天</div>
                                                    </div>
                                                    <div class="config-val-input config-val-input_@((int)TaskTriggerExpressionItemConfigType.每月个最后一个星期N)">
                                                        <div>每月最后一个 @Html.EnumToSelect("Condition_MonthLastWeekDay_" + (int)item, TaskWeek.星期一, new { @class = "form-control w-100" }, selectedValue: (TaskWeek)nowItem.BeginValue)</div>
                                                    </div>
                                                    <div class="config-val-input config-val-input_@((int)TaskTriggerExpressionItemConfigType.本月第M个星期N)">
                                                        <div>本月第 @Html.TextBox("Condition_MonthWhichWeekDay_Num_" + (int)item, nowItem.BeginValue, new { @class = "form-control w-100" }) 个 @Html.EnumToSelect("Condition_MonthWhichWeekDay_" + (int)item, TaskWeek.星期一, new { @class = "form-control w-100" }, selectedValue: (TaskWeek)nowItem.EndValue)</div>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="config-val-input input_mt_16 config-val-input_@((int)TaskTriggerExpressionItemConfigType.集合值)">
                                                        <div>@Html.TextBox("Condition_ArrayValue_" + (int)item, string.Join(",", arrayValues), new { @class = "form-control w-200" })</div>
                                                        <div>使用逗号(",")分割多个值</div>
                                                    </div>
                                                    <div class="config-val-input config-val-input_@((int)TaskTriggerExpressionItemConfigType.范围值)">
                                                        <div>从 @Html.TextBox("Condition_BeginValue_" + (int)item, nowItem.BeginValue, new { @class = "form-control w-100" })@itemName 到 @Html.TextBox("Condition_EndValue_" + (int)item, nowItem.EndValue, new { @class = "form-control w-100" })@itemName</div>
                                                    </div>
                                                    <div class="config-val-input config-val-input_@((int)TaskTriggerExpressionItemConfigType.开始_间隔)">
                                                        <div>从第 @Html.TextBox("Condition_IntervalBeginValue_" + (int)item, nowItem.BeginValue, new { @class = "form-control w-100" })@itemName 开始,间隔 @Html.TextBox("Condition_IntervalSplitValue_" + (int)item, nowItem.EndValue, new { @class = "form-control w-100" })@itemName</div>
                                                    </div>
                                                    if (item == TaskTriggerExpressionItem.日)
                                                    {
                                                        <div class="config-val-input config-val-input_@((int)TaskTriggerExpressionItemConfigType.每月倒数第N天)">
                                                            <div>每月倒数第 @Html.TextBox("Condition_MonthEndDay_" + (int)item, nowItem.BeginValue, new { @class = "form-control w-200" }) 天</div>
                                                        </div>
                                                    }
                                                }
                                            </td>
                                        </tr>
                                    }
                                }
                            </table>
                        </td>
                    </tr>

                    <tr>
                        <td class="txt-right tit">* @Html.LabelFor(c => c.ApplyTo)</td>
                        <td>
                            @if (isAdd)
                            {
                                @Html.EnumToSelect(a => a.ApplyTo, TaskTriggerApplyTo.所有, new { @class = "form-control w-200" },selectedValue: Model.ApplyTo)
                                @Html.DefaultValidationMessageFor(a => a.ApplyTo, "", new { @class = "tip prompt" })
                            }
                            else
                            {
                                @Html.HiddenFor(c => c.ApplyTo)
                                <span>【@(Model.ApplyTo)】</span>
                            }
                        </td>
                    </tr>
                    @*<tr id="tr_applytoserver">
                            <td class="txt-right tit"><div class="h_15"></div><button type="button" class="button btn_green btn-xs" id="btn_addapplyserver"><i class="glyphicon glyphicon-plus"></i> 添加</button></td>
                            <td>
                                <table cellpadding="0" cellspacing="0">
                                    <thead>
                                        <tr><th width="100px">名称</th><th class="pd_l_5" width="300px">地址</th><th class="pd_l_5" width="150px">状态</th><th class="pd_l_5">操作</th></tr>
                                        <tr class="tr_template" id="tr_tem_servernode">
                                            <td class="server_name"></td>
                                            <td class="server_host pd_l_5"></td>
                                            <td class="pd_l_5">
                                                @Html.EnumToSelect("Trigger_Server_State", TaskTriggerServerRunState.运行中, new { @class = "form-control Trigger_Server_State_Select 150px" }, ((int)Model.ApplyTo).ToString())
                                            </td>
                                            <td class="pd_l_5"><input type="hidden" name="Trigger_Server_Id" class="Trigger_Server_Id_Input" /><button type="button" class="button btn_red btn-xs btn_delete_servernode"><i class="glyphicon glyphicon-trash"></i> 删除</button></td>
                                        </tr>
                                    </thead>
                                    <tbody id="servernode_tbody"></tbody>
                                </table>
                            </td>
                        </tr>*@
                    <tr>
                        <td class="txt-right tit">* @Html.LabelFor(c => c.State)</td>
                        <td>
                            @Html.EnumToSelect(a => a.State, TaskTriggerState.运行, new { @class = "form-control w-200" }, "", "选择状态", ((int)Model.State).ToString())
                            @Html.DefaultValidationMessageFor(a => a.State, "", new { @class = "tip prompt" })
                        </td>
                    </tr>
                    @*<tr>
                            <td class="txt-right tit">* @Html.LabelFor(c => c.Priority)</td>
                            <td>
                                @Html.TextBoxFor(a => a.Priority, new { @class = "form-control w-200" })
                                @Html.DefaultValidationMessageFor(a => a.Priority, "", new { @class = "tip prompt" })
                            </td>
                        </tr>*@
                    <tr>
                        <td class="txt-right tit">* @Html.LabelFor(c => c.Description)</td>
                        <td>
                            @Html.TextAreaFor(a => a.Description, new { @class = "form-control w-200", style = "height:100px" })
                            @Html.DefaultValidationMessageFor(a => a.Description, "", new { @class = "tip prompt" })
                        </td>
                    </tr>
                </table>
                                    }
        </div>
    </div>
</div>
<div id="pc-foot">
    <div class="txt-right form-submitbtn-con pdr-10"><button type="button" onclick="SubmitForm()" class="btn btn-blue">提交</button></div>
</div>
@Scripts.Render("~/scripts/date")
@section Scripts{
    <script type="text/javascript">
        HasDivPageCon = true;
        var isAdd = '@isAdd.ToString().ToLower()' == 'true';
        var conditionYearDayCount = @conditionYearDayCount;
        var conditionMonthDayCount = @conditionMonthDayCount;
        var conditionFullDateCount = @conditionFullDateCount;
        var conditionWeekCount = @conditionWeekCount;
        var selectServers = new Object();//选择的服务节点
        $(function () {

            //重复运行选择
            $("#RepeatForever").change(function(res){
                var checked=$(this)[0].checked;
                if(checked){
                    $("#RepeatCount").val('0');
                    $("#repeat_countinputgroup").hide();
                }else{
                    $("#repeat_countinputgroup").show();
                }
            });
            $("#RepeatForever").change();

            //类型选择
            $("#Type").change(function () {
                var val = $(this).val();
                $(".tr_type").hide();
                switch (val) {
                    case '@((int)TaskTriggerType.简单)':
                        $("#tr_type_simple").show();
                        break;
                    case '@((int)TaskTriggerType.自定义)':
                        $("#tr_type_expression").show();
                        break;
                    default:
                        break;
                }
            });

            //附加条件类型
            $("#Condition_Type").change(function () {
                var val = $(this).val();
                $(".tr_condition").hide();
                switch (val) {
                    case '@((int)TaskTriggerConditionType.每年日期)':
                        $("#tr_condition_everyyearday").show();
                        break;
                    case '@((int)TaskTriggerConditionType.每月日期)':
                        $("#tr_condition_everymonthday").show();
                        break;
                    case '@((int)TaskTriggerConditionType.固定日期)':
                        $("#tr_condition_fulldate").show();
                        break;
                    case '@((int)TaskTriggerConditionType.每天时间段)':
                        $("#tr_condition_timerange").show();
                        break;
                    case '@((int)TaskTriggerConditionType.星期配置)':
                        $("#tr_condition_week").show();
                        break;
                    case '@((int)TaskTriggerConditionType.自定义)':
                        $("#tr_condition_expression").show();
                        break;
                }
            });

            //配置项
            $(".select_config_itemtype_extype").change(function () {
                var val = $(this).val();
                var inputCon = $(this).parent().next("td");
                inputCon.find('.config-val-input').hide();
                inputCon.find('.config-val-input_' + val).show();
            });

            //添加附加条件——每年每天
            $("#btn_addcondition_everyyearday").click(function () {
                conditionYearDayCount++;
                var trEle = $("#tr_template_everyyearday").clone().removeClass("tr_template");
                trEle.find('.yearday_month_input').attr('name', 'Condition_YearDay_Month-' + conditionYearDayCount);
                trEle.find('.yearday_day_input').attr('name', 'Condition_YearDay_Day-' + conditionYearDayCount);
                trEle.find('.yearday_enable').attr('name', 'Condition_YearDay_Enable-' + conditionYearDayCount);
                $("#condition_everyyearday_tbody").append(trEle);
            });
            //删除配置项
            $("body").on('click', '.btn_delete_conditionitem', function () {
                $(this).parents("tr").first().remove();
            });
            //添加附件条件-每月每天
            $("#btn_addcondition_everymonthday").click(function () {
                conditionMonthDayCount++;
                var trEle = $("#tr_template_everymonthday").clone().removeClass("tr_template");
                trEle.find('.monthday_day_input').attr('name', 'Condition_MonthDay_Day-' + conditionMonthDayCount);
                trEle.find('.monthday_enable').attr('name', 'Condition_MonthDay_Enable-' + conditionMonthDayCount);
                $("#condition_everymonthday_tbody").append(trEle);
            });

            //添加附加条件-固定日期
            $("#btn_addcondition_fulldate").click(function () {
                conditionFullDateCount++;
                var trEle = $("#tr_template_fulldate").clone().removeClass("tr_template");
                trEle.find('.fulldate_input').attr('name', 'Condition_FullDate_Date-' + conditionFullDateCount);
                trEle.find('.fulldate_enable').attr('name', 'Condition_FullDate_Enable-' + conditionFullDateCount);
                $("#condition_fulldate_tbody").append(trEle);
            });

            //添加附加条件-星期
            $("#btn_addcondition_week").click(function () {
                conditionWeekCount++;
                var trEle = $("#tr_template_fullweek").clone().removeClass("tr_template");
                trEle.find('.weekcondition_day_input').attr('name', 'Condition_Week_Day-' + conditionWeekCount);
                trEle.find('.weekcondition_enable').attr('name', 'Condition_Week_Enable-' + conditionWeekCount);
                $("#condition_week_body").append(trEle);
            });

            //应用对象
            $("#ApplyTo").change(function () {
                var val = $(this).val();
                $("#tr_applytoserver").hide();
                switch (val) {
                    case '@((int)TaskTriggerApplyTo.服务)':
                        $("#tr_applytoserver").show();
                        break;
                }
            });

            //添加服务节点
            $("#btn_addapplyserver").click(function () {
                SelectServerNode();
            });
            //删除服务节点
            $("body").on("click", '.btn_delete_servernode', function () {
                var serverId = $(this).attr("serverid");
                if (!selectServers[serverId]) {
                    return;
                }
                selectServers[serverId] = null;
                $(this).parents("tr").first().remove();
            });

            $("#Type").change();
            $("#Condition_Type").change();
            $('.select_config_itemtype_extype').change();
        });

        //提交表单
        function SubmitForm() {
            $("#formvalide").submit();
        }

        //成功回调
        function SuccessCallback(res) {
            if (!res) {
                return;
            }
            ResultMsg(res);
            if (res.Success) {
                //if(isAdd){
                //    window.top.RefreshCurrentPage();
                //}
                window.top.RedirectCurrentPage('@Url.Action("TriggerDetail","Task",new {id="_id" })'.replace('_id', res.Data.Id), '执行计划详情');
            }
        }

        //失败回调
        function FailedCallback(res) {
            ErrorMsg('提交失败');
        }

        //选择服务节点
        function SelectServerNode() {
            DialogPage({
                url: '@Url.Action("ServerNodeMultipleSelect", "Task")',
                width: "600px",
                height: "400px",
                title: '选择服务节点',
                ok: false,
                cancel: null
            });
        }

        //服务节点选择回调
        function ServerNodeMultipleSelectCallback(servers) {
            if (!servers) {
                return;
            }
            for (var s in servers) {
                var nowServer = servers[s];
                var serverId = nowServer.Id;
                if (servers[serverId]) {
                    continue;
                }
                var trEle = $("#tr_tem_servernode").clone().removeClass("tr_template").removeAttr("tr_tem_servernode");
                trEle.find('.server_name').html(nowServer.Name);
                trEle.find('.server_host').html(nowServer.Host);
                trEle.find('.btn_delete_servernode').attr('serverid', serverId);
                trEle.find('.Trigger_Server_Id_Input').val(serverId).attr('name', 'Trigger_Server_' + serverId);
                trEle.find('.Trigger_Server_State_Select').attr('name', 'Trigger_Server_' + serverId + '_State');
                $("#servernode_tbody").append(trEle);
                selectServers[serverId] = nowServer;
            }
        }

    </script>
}
