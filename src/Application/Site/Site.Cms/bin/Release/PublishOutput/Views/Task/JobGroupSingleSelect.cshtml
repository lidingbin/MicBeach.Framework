@{
    string allJobGroup = ViewBag.AllJobGroup;
    string nodeString = ViewBag.AllNodes;
    bool lastChild = false;
}
@Styles.Render("~/style/ztree")
<div id="pc-body">
    <div id="pc-body-inner">
        <ul id="jobgroup_tree" class="ztree"></ul>
    </div>
</div>
<div id="pc-foot">
    <div class="txt-right form-submitbtn-con pdr-10"><button type="button" onclick="ConfirmSelect()" class="btn btn-blue"><i class="glyphicon glyphicon-check"></i> 确定</button></div>
</div>
@section Scripts
{
    @Scripts.Render("~/scripts/ztree")
    <script type="text/javascript">
        var seetings = {
            view: {
                nameIsHTML: true,
            },
            callback: {
                beforeExpand: BeforeExpand,
                onCheck: CheckNodeEvent
            },
            check: {
                enable: true,
                chkboxType: { "Y": "", "N": "" }
            },
            edit: {
                enable: true,
                showRemoveBtn: false,
                showRenameBtn: false
            }
        };
        var allNodes = JSON.parse('@Html.Raw(nodeString)');
        var allJobGroups = JSON.parse('@Html.Raw(allJobGroup)');
        var jobGroupNames = '';
        var selectJobGroup;
        var lastChild = '@(lastChild.ToString().ToLower())' == "true";
        var hideJobGroups = new Array();
        var initSelectJobGroups = new Array();
        var loadingIcoUrl = '/Content/Scripts/ztree/img/loading.gif';
        $(function () {
            InitAllJobGroupTree();
            if (art.dialog.data("RemoveJobGroupSysNos")) {
                hideJobGroups = art.dialog.data("RemoveJobGroupSysNos").split(",");
            }
            if (art.dialog.data("SelectJobGroupSysNos")) {
                initSelectJobGroups = art.dialog.data("SelectJobGroupSysNos").split(",");
            }
            var treeObj = $.fn.zTree.getZTreeObj("jobgroup_tree");
            var hideParentNodes = new Object();
            for (var ha in hideJobGroups) {
                var nowHaSysNo = hideJobGroups[ha];
                var nodes = treeObj.getNodesByParam("id", nowHaSysNo);
                for (var n in nodes) {
                    var nowNode = nodes[n];
                    var parentNode = nowNode.getParentNode();
                    treeObj.hideNode(nowNode);
                    if (parentNode != null) {
                        hideParentNodes[parentNode.id] = parentNode;
                        parentNode.halfCheck = true;
                    }
                }
            }
            for (var pn in hideParentNodes) {
                var pnode = hideParentNodes[pn];
                do {
                    var checkStatus = pnode.getCheckStatus();
                    if (checkStatus && !checkStatus.half) {
                        pnode.halfCheck = true;
                    }
                    var childNodes = pnode.children;
                    var hide = true;
                    for (var pcn in childNodes) {
                        var pchnode = childNodes[pcn];
                        hide = hide && pchnode.isHidden;
                        if (!hide) {
                            break;
                        }
                    }
                    if (hide) {
                        treeObj.hideNode(pnode);
                    }
                    pnode = pnode.getParentNode();
                } while (pnode != null);
            }

            //初始选中
            for (var sa in initSelectJobGroups) {
                var nowSelectSysNo = initSelectJobGroups[sa];
                var nodes = treeObj.getNodesByParam("id", nowSelectSysNo);
                for (var n in nodes) {
                    var nowNode = nodes[n];
                    treeObj.checkNode(nowNode, true, true, true);
                }
            }
        });

        //初始化所有分类树控件
        function InitAllJobGroupTree() {
            $.fn.zTree.init($("#jobgroup_tree"), seetings, allNodes);
        }

        //确认选择方法
        function ConfirmSelect() {
            jobGroupNames = '';
            selectJobGroup = null;
            var checkNodes = $.fn.zTree.getZTreeObj("jobgroup_tree").getCheckedNodes(true);
            if (checkNodes && checkNodes.length > 0) {
                var firstNode = checkNodes[0];
                selectJobGroup = allJobGroups[firstNode.id];
                jobGroupNames = selectJobGroup.Name;
                var parentNode = firstNode.getParentNode();
                while (parentNode)
                {
                    var parentGroup = allJobGroups[parentNode.id];
                    if (parentGroup) {
                        jobGroupNames = parentGroup.Name + '>' + jobGroupNames;
                    }
                    parentNode = parentNode.getParentNode();
                }
            }
            art.dialog.close(true);
            art.dialog.opener.JobGroupSingleSelectCallback(selectJobGroup, jobGroupNames);
        }

        ////初始化单个选择节点
        //function SelectSingleItem(treeNode, allNodes) {
        //    if (!treeNode) {
        //        return;
        //    }
        //    var nowName = '';
        //    var allChecked = GetNodeCheckStatus(treeNode);
        //    var nowId = treeNode.id;
        //    var nowAuthorityOperationGroup = allJobGroupsObj[nowId];
        //    if (!nowAuthorityOperationGroup) {
        //        return;
        //    }
        //    if (treeNode.checked) {
        //        nowName = nowAuthorityOperationGroup.Name;
        //    }
        //    if (!lastChild && treeNode.checked) {
        //        selectJobGroup.push(nowAuthorityOperationGroup);
        //    }
        //    else if (allChecked) {
        //        var parentNode = treeNode.getParentNode();
        //        var parentChecked = GetNodeCheckStatus(parentNode);
        //        if (!parentChecked) {
        //            selectJobGroup.push(nowAuthorityOperationGroup);
        //        }
        //    }
        //    if (!allChecked) {
        //        var childNodes = new Array();
        //        for (var cn in allNodes) {
        //            var nowChildNode = allNodes[cn];
        //            var childJobGroup = allJobGroupsObj[nowChildNode.id];
        //            if (childJobGroup.Level > 1 && childJobGroup.ParentAuthorityOperationGroup == nowId) {
        //                childNodes.push(nowChildNode);
        //            }
        //        }
        //        var childNames = new Array();
        //        for (var cn in childNodes) {
        //            var itemResult = SelectSingleItem(childNodes[cn], allNodes);
        //            var itemNames = $.trim(itemResult.AuthorityOperationGroupNames);
        //            if (itemNames != "") {
        //                childNames.push(itemNames);
        //            }
        //        }
        //        if (childNames.length > 0) {
        //            nowName = nowName + '：[ ' + childNames.join(",") + " ]";
        //        }
        //    }
        //    return { AuthorityOperationGroupNames: nowName }
        //}

        //获取节点全选状态
        function GetNodeCheckStatus(treeNode) {
            if (!treeNode) {
                return false;
            }
            var halfStatus = treeNode.getCheckStatus();
            var checked = halfStatus.checked && !halfStatus.half;
            var childNodes = treeNode.children;
            for (var cn in childNodes) {
                var cnode = childNodes[cn];
                checked = checked && !cnode.isHidden;
            }
            return checked;
        }

        //展开加载数据
        function BeforeExpand(treeId, treeNode) {
            if (!treeNode || treeNode.loadData) {
                return true;
            }
            var zTree = $.fn.zTree.getZTreeObj(treeId);
            treeNode.icon = loadingIcoUrl;
            zTree.updateNode(treeNode);
            $.post('@Url.Action("LoadChildJobGroups", "Task")', { parentId: treeNode.id }, function (res) {
                if (!res) {
                    return;
                }
                var childNodes = JSON.parse(res.ChildNodes);
                zTree.addNodes(treeNode, -1, childNodes);
                treeNode.loadData = true;
                treeNode.icon = "";
                zTree.updateNode(treeNode);
                zTree.expandNode(treeNode, true);
                var childJobGroups = JSON.parse(res.JobGroupData);
                for (var c in childJobGroups) {
                    allJobGroups[c] = childJobGroups[c];
                }
            });
            return false;
        }

        //选择节点时执行的方法
        function CheckNodeEvent(event, treeId, treeNode){
            var zTree = $.fn.zTree.getZTreeObj(treeId);
            zTree.checkAllNodes(false);
            zTree.checkNode(treeNode,true,false);
        }

    </script>
}
