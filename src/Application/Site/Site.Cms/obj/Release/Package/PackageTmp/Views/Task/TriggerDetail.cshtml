
@{
    ViewBag.Title = "执行计划详情";
}
@using MicBeach.ViewModel.Task
@using MicBeach.CTask
@using MicBeach.Util.Extension
@using MicBeach.Util.Serialize
@model TriggerViewModel
@{
    var serverStateValues = ServerState.运行.GetType().GetEnumValueAndNames();
    var triggerServerRunStateValues = TaskTriggerServerRunState.运行.GetType().GetEnumValueAndNames();
}
<style>
    .trigger_contenttable {
        width: 100%;
    }

        .trigger_contenttable thead tr th {
            height: 25px;
            color: #fff;
            background: #ddd;
            padding-left: 5px;
        }

        .trigger_contenttable tbody tr td {
            height: 25px;
            padding: 5px;
        }

        .trigger_contenttable .t_bd_r {
            border-right: 1px solid #ccc;
        }
</style>
<div id="pc-head">
    <div class="form-con" id="home">
        <div class="form-ingroup">
            @*<h5 class="fig-tit blod fz_12 pd_l_5 b_t_none bg_f5">
                    基础信息
                </h5>*@
            <div class="fig-body">
                <table cellpadding="0" cellspacing="0" class="form_table detail_table">
                    <tr>
                        <td class="w-150 detail-tit txt-right">名称：</td>
                        <td class="w-150 detail-txt">@Model.Name</td>
                        <td class="w-150 detail-tit txt-right">所属任务：</td>
                        <td class="w-250 detail-txt">@(Model.Job?.Name)</td>
                        <td class="w-150 detail-tit txt-right">状态：</td>
                        <td class="detail-txt">@Model.State</td>
                    </tr>
                    <tr>
                        <td class="w-150 detail-tit txt-right">执行策略：</td>
                        <td class="w-150 detail-txt">@Model.Type</td>
                        <td class="w-150 detail-tit txt-right">应用对象：</td>
                        <td class="w-250 detail-txt">@Model.ApplyTo</td>
                        <td class="w-150 detail-tit txt-right">说明：</td>
                        <td class="detail-txt">@Model.Description</td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
</div>

<div id="pc-body">
    <div id="pc-body-inner">
        <div class="form_tabgroup c_pagecon">
            <ul class="nav nav-tabs c_head" role="tablist">
                <li role="presentation" class="active">
                    <a href="#goodsinfo" id="tab_link_server" role="tab" data-toggle="tab" style="border-radius:0px;border-left:none !important">应用服务</a>
                </li>
                <li role="presentation">
                    <a href="#trigger_strategy" id="tab_link_rule" role="tab" data-toggle="tab">执行策略</a>
                </li>
                <li role="presentation">
                    <a href="#job_executelog" id="tab_link_exectlog" role="tab" data-toggle="tab">执行日志</a>
                </li>
            </ul>
            <div class="form_tabgconent tab-content c_body">
                @if (Model.ApplyTo == TaskTriggerApplyTo.服务)
                {
                    <div role="tabpanel" class="tab-pane active c_pagecon" id="goodsinfo">
                        <div class="c_head">
                            <div class="lis_search pd-10">
                                <div class="input-group">
                                    <input type="text" class="form-control w-200" id="search_servername" placeholder="名称/地址">
                                    <span class="input-group-btn">
                                        <button class="btn btn-default fc_3" type="button" id="searchbusiness_btn" onclick="LoadServers()"><i class="glyphicon glyphicon-search"></i></button>
                                    </span>
                                </div>
                                <button class="btn btn-success" type="button" id="btn_addserver"><i class="glyphicon glyphicon-plus"></i> 添加</button>
                                <button class="btn btn-danger" type="button" id="btn_delselectserver"><i class="glyphicon glyphicon-trash"></i> 移除选中</button>
                            </div>
                        </div>
                        <div class="c_body">
                            <table class="table table-striped table-bordered nowrap wp-100 bd-lw-0" id="server_table" cellpadding="0" cellspacing="0"></table>
                        </div>
                        <div class="c_foot" id="server_tabe_pager"></div>
                    </div>
                }
                else
                {
                    <div role="tabpanel" class="tab-pane active c_pagecon" id="goodsinfo">
                        <div class="c_head">
                            <div class="lis_search pd-10">
                            </div>
                        </div>
                        <div class="c_body">
                            <table class="table table-striped table-bordered nowrap wp-100 bd-lw-0" id="server_table" cellpadding="0" cellspacing="0"></table>
                        </div>
                    </div>
                }

                <div role="tabpanel" class="tab-pane active c_pagecon" id="trigger_strategy">
                    <div class="c_head">
                        <div class="lis_search pd-10">
                        </div>
                    </div>
                    <div class="c_body">
                        <table class="trigger_contenttable bd-w-0 wp-100 bd-b-ddd bd-b-solid bd-bw-1" cellpadding="0" cellspacing="0">
                            <thead>
                                <tr>
                                    <th width="300px" class="h-25 t_bd_r">调度策略</th>
                                    <th>附加条件</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td class="t_bd_r">
                                        <table cellpadding="0" cellspacing="0">
                                            <colgroup>
                                                <col width="100" />
                                                <col />
                                            </colgroup>
                                            @if (Model.Type == TaskTriggerType.简单)
                                            {
                                                SimpleTriggerViewModel simpleTrigger = Model as SimpleTriggerViewModel;
                                                if (simpleTrigger != null)
                                                {
                                                    <tr><td>持续执行:</td><td>@(simpleTrigger.RepeatForever ? "是" : "否")</td></tr>
                                                    <tr><td>重复次数:</td><td>@(simpleTrigger.RepeatForever ? "--" : simpleTrigger.RepeatCount.ToString())</td></tr>
                                                    <tr><td>间隔时间:</td><td>@(simpleTrigger.RepeatInterval)毫秒</td></tr>
                                                }
                                            }
                                            else
                                            {
                                                ExpressionTriggerViewModel expressionTrigger = Model as ExpressionTriggerViewModel;
                                                if (expressionTrigger != null && expressionTrigger.ExpressionItems != null)
                                                {
                                                    foreach (var expressionItem in expressionTrigger.ExpressionItems)
                                                    {
                                                        string itemText = string.Empty;
                                                        <tr>
                                                            <td>@expressionItem.Option：</td>
                                                            <td>
                                                                @switch (expressionItem.ValueType)
                                                                {
                                                                    case TaskTriggerExpressionItemConfigType.不限制:
                                                                    case TaskTriggerExpressionItemConfigType.不指定值:
                                                                    case TaskTriggerExpressionItemConfigType.工作日:
                                                                        itemText = expressionItem.ValueType.ToString();
                                                                        break;
                                                                    case TaskTriggerExpressionItemConfigType.开始_间隔:
                                                                        if (expressionItem.Option == TaskTriggerExpressionItem.星期)
                                                                        {
                                                                            itemText = string.Format("从{0}开始,间隔{1}天", (TaskWeek)expressionItem.BeginValue, expressionItem.EndValue);
                                                                        }
                                                                        else
                                                                        {
                                                                            itemText = string.Format("从第{0}{1}开始,间隔{2}{1}", expressionItem.BeginValue, expressionItem.Option.ToString(), expressionItem.EndValue);
                                                                        }
                                                                        break;
                                                                    case TaskTriggerExpressionItemConfigType.最后:
                                                                        if (expressionItem.Option == TaskTriggerExpressionItem.星期)
                                                                        {
                                                                            itemText = "每个星期最后一天";
                                                                        }
                                                                        else if (expressionItem.Option == TaskTriggerExpressionItem.日)
                                                                        {
                                                                            itemText = "每个月最后一天";
                                                                        }
                                                                        break;
                                                                    case TaskTriggerExpressionItemConfigType.本月第M个星期N:
                                                                        if (expressionItem.Option == TaskTriggerExpressionItem.星期)
                                                                        {
                                                                            itemText = string.Format("当月第{0}个{1}", expressionItem.BeginValue, (TaskWeek)expressionItem.EndValue);

                                                                        }
                                                                        break;
                                                                    case TaskTriggerExpressionItemConfigType.每月个最后一个星期N:
                                                                        if (expressionItem.Option == TaskTriggerExpressionItem.星期)
                                                                        {
                                                                            itemText = string.Format("当月最后一个{0}", (TaskWeek)expressionItem.BeginValue);

                                                                        }
                                                                        break;
                                                                    case TaskTriggerExpressionItemConfigType.每月倒数第N天:
                                                                        if (expressionItem.Option == TaskTriggerExpressionItem.日)
                                                                        {
                                                                            itemText = string.Format("当月倒数第{0}天", expressionItem.BeginValue);

                                                                        }
                                                                        break;
                                                                    case TaskTriggerExpressionItemConfigType.范围值:
                                                                        if (expressionItem.Option == TaskTriggerExpressionItem.星期)
                                                                        {
                                                                            itemText = string.Format("从{0}到{1}", (TaskWeek)expressionItem.BeginValue, (TaskWeek)expressionItem.EndValue);
                                                                        }
                                                                        else
                                                                        {
                                                                            itemText = string.Format("从第{0}{1}到{2}{1}", expressionItem.BeginValue, expressionItem.Option.ToString(), expressionItem.EndValue);
                                                                        }
                                                                        break;
                                                                    case TaskTriggerExpressionItemConfigType.集合值:
                                                                        itemText = string.Join(",", expressionItem.ArrayValue);
                                                                        break;
                                                                }
                                                                @itemText
                                                            </td>
                                                        </tr>
                                                    }
                                                }
                                            }
                                        </table>
                                    </td>
                                    <td style="vertical-align:top">
                                        <table>
                                            @if (Model.Condition != null)
                                            {
                                                switch (Model.Condition.Type)
                                                {
                                                    case TaskTriggerConditionType.不限制:
                                                        break;
                                                    case TaskTriggerConditionType.每年日期:
                                                        TriggerAnnualConditionViewModel annualCondition = Model.Condition as TriggerAnnualConditionViewModel;
                                                        if (annualCondition != null)
                                                        {
                                                            <tr><th width="100px">月份</th><th width="100px">日期</th><th>方式</th></tr>
                                                            foreach (var day in annualCondition.Days)
                                                            {
                                                                <tr>
                                                                    <td width="100px">@day.Month</td>
                                                                    <td width="100px">@day.Day</td>
                                                                    <td>@(day.Include ? "包含" : "排除")</td>
                                                                </tr>
                                                            }

                                                        }
                                                        break;
                                                    case TaskTriggerConditionType.星期配置:
                                                        TriggerWeeklyConditionViewModel weeklyCondition = Model.Condition as TriggerWeeklyConditionViewModel;
                                                        if (weeklyCondition != null)
                                                        {
                                                            foreach (var day in weeklyCondition.Days)
                                                            {
                                                                <tr>
                                                                    <td width="100px">@((TaskWeek)day.Day)</td>
                                                                    <td>@(day.Include ? "包含" : "排除")</td>
                                                                </tr>
                                                            }
                                                        }
                                                        break;
                                                    case TaskTriggerConditionType.每天时间段:
                                                        TriggerDailyConditionViewModel dailyCondition = Model.Condition as TriggerDailyConditionViewModel;
                                                        if (dailyCondition != null)
                                                        {
                                                            <tr><th width="150px">开始时间</th><th width="150px">结束时间</th><th>使用方式</th></tr>
                                                            <tr>
                                                                <td width="150px">@dailyCondition.BeginTime</td>
                                                                <td width="150px">@dailyCondition.EndTime</td>
                                                                <td>@(dailyCondition.Inversion ? "使用设置时间范围以外" : "使用设置时间范围")</td>
                                                            </tr>
                                                        }
                                                        break;
                                                    case TaskTriggerConditionType.每月日期:
                                                        TriggerMonthlyConditionViewModel monthlyCondition = Model.Condition as TriggerMonthlyConditionViewModel;
                                                        if (monthlyCondition != null && monthlyCondition.Days != null)
                                                        {
                                                            <tr><th width="100px">日期</th><th>方式</th></tr>
                                                            foreach (var montylyCondition in monthlyCondition.Days)
                                                            {
                                                                <tr><td>@montylyCondition.Day</td><td>@(montylyCondition.Include ? "包含" : "排除")</td></tr>
                                                            }
                                                        }
                                                        break;
                                                    case TaskTriggerConditionType.固定日期:
                                                        TriggerFullDateConditionViewModel fullDateCondition = Model.Condition as TriggerFullDateConditionViewModel;
                                                        if (fullDateCondition != null && fullDateCondition.Dates != null)
                                                        {
                                                            <tr><th width="100px">日期</th><th>方式</th></tr>
                                                            foreach (var fullDate in fullDateCondition.Dates)
                                                            {
                                                                <tr><td>@fullDate.Date.ToString("yyyy-MM-dd")</td><td>@(fullDate.Include ? "包含" : "排除")</td></tr>
                                                            }
                                                        }
                                                        break;
                                                    case TaskTriggerConditionType.自定义:
                                                        TriggerExpressionConditionViewModel expressionCondition = Model.Condition as TriggerExpressionConditionViewModel;
                                                        if (expressionCondition != null && expressionCondition.ExpressionItems != null)
                                                        {
                                                            foreach (var expressionItem in expressionCondition.ExpressionItems)
                                                            {
                                                                string itemText = string.Empty;
                                                                <tr>
                                                                    <td>@expressionItem.Option：</td>
                                                                    <td>
                                                                        @switch (expressionItem.ValueType)
                                                                        {
                                                                            case TaskTriggerExpressionItemConfigType.不限制:
                                                                            case TaskTriggerExpressionItemConfigType.不指定值:
                                                                            case TaskTriggerExpressionItemConfigType.工作日:
                                                                                itemText = expressionItem.ValueType.ToString();
                                                                                break;
                                                                            case TaskTriggerExpressionItemConfigType.开始_间隔:
                                                                                if (expressionItem.Option == TaskTriggerExpressionItem.星期)
                                                                                {
                                                                                    itemText = string.Format("从{0}开始,间隔{1}天", (TaskWeek)expressionItem.BeginValue, expressionItem.EndValue);
                                                                                }
                                                                                else
                                                                                {
                                                                                    itemText = string.Format("从第{0}{1}开始,间隔{2}{1}", expressionItem.BeginValue, expressionItem.Option.ToString(), expressionItem.EndValue);
                                                                                }
                                                                                break;
                                                                            case TaskTriggerExpressionItemConfigType.最后:
                                                                                if (expressionItem.Option == TaskTriggerExpressionItem.星期)
                                                                                {
                                                                                    itemText = "每个星期最后一天";
                                                                                }
                                                                                else if (expressionItem.Option == TaskTriggerExpressionItem.日)
                                                                                {
                                                                                    itemText = "每个月最后一天";
                                                                                }
                                                                                break;
                                                                            case TaskTriggerExpressionItemConfigType.本月第M个星期N:
                                                                                if (expressionItem.Option == TaskTriggerExpressionItem.星期)
                                                                                {
                                                                                    itemText = string.Format("当月第{0}个{1}", expressionItem.BeginValue, (TaskWeek)expressionItem.EndValue);

                                                                                }
                                                                                break;
                                                                            case TaskTriggerExpressionItemConfigType.每月个最后一个星期N:
                                                                                if (expressionItem.Option == TaskTriggerExpressionItem.星期)
                                                                                {
                                                                                    itemText = string.Format("当月最后一个{0}", (TaskWeek)expressionItem.BeginValue);

                                                                                }
                                                                                break;
                                                                            case TaskTriggerExpressionItemConfigType.每月倒数第N天:
                                                                                if (expressionItem.Option == TaskTriggerExpressionItem.日)
                                                                                {
                                                                                    itemText = string.Format("当月倒数第{0}天", expressionItem.BeginValue);

                                                                                }
                                                                                break;
                                                                            case TaskTriggerExpressionItemConfigType.范围值:
                                                                                if (expressionItem.Option == TaskTriggerExpressionItem.星期)
                                                                                {
                                                                                    itemText = string.Format("从{0}到{1}", (TaskWeek)expressionItem.BeginValue, (TaskWeek)expressionItem.EndValue);
                                                                                }
                                                                                else
                                                                                {
                                                                                    itemText = string.Format("从第{0}{1}到{2}{1}", expressionItem.BeginValue, expressionItem.Option.ToString(), expressionItem.EndValue);
                                                                                }
                                                                                break;
                                                                            case TaskTriggerExpressionItemConfigType.集合值:
                                                                                itemText = string.Join(",", expressionItem.ArrayValue);
                                                                                break;
                                                                        }
                                                                        @itemText
                                                                    </td>
                                                                </tr>
                                                            }
                                                        }
                                                        break;
                                                }
                                            }
                                        </table>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <div role="tabpanel" class="tab-pane active c_pagecon" id="job_executelog">
                    <div class="c_head">
                        <div class="lis_search pd-10">
                            <label class="stit">开始时间</label><span class="sctrol"><input type="text" id="search_execlogbegintime" placeholder="" readonly="readonly" class="form-control w_150 DateTime" />-<input type="text" id="search_execlogendtime" placeholder="" class="form-control w_150 DateTime" readonly="readonly" /></span>
                            <button class="btn btn-default fc_3" type="button" onclick="LoadExecLog()"><i class="glyphicon glyphicon-search"></i> 搜索</button>
                        </div>
                    </div>
                    <div class="c_body">
                        <table class="table table-striped table-bordered nowrap wp-100 bd-lw-0" id="exectlog_table" cellpadding="0" cellspacing="0">
                            @*<thead>
                                    <tr>
                                        <th width="150px" class="b_l_none">服务节点</th>
                                        <th width="200px">服务地址</th>
                                        <th width="130px" class="t_c">开始时间</th>
                                        <th width="130px" class="t_c">结束时间</th>
                                        <th>说明</th>
                                    </tr>
                                </thead>
                                <tbody id="exectlog_tabe_page_list"></tbody>*@
                        </table>
                    </div>
                    <div class="c_foot" id="exectlog_tabe_pager"></div>
                </div>

            </div>
        </div>
    </div>
</div>

<div id="pc-foot">
    <div class="txt-right form-submitbtn-con pdr-10">
        <button class="btn btn-blue" id="btn_edit"><i class="glyphicon glyphicon-edit"></i> 编辑</button>
        @if (Model.State == TaskTriggerState.运行)
        {
            <button class="btn btn-success" id="btn_disable"><i class="glyphicon glyphicon-eye-close"></i> 停止</button>
        }
        else
        {
            <button class="btn btn-success" id="btn_enable"><i class="glyphicon glyphicon-eye-open"></i> 运行</button>
        }
        <button class="btn btn-danger" id="btn_delete"><i class="glyphicon glyphicon-trash"></i> 删除</button>
    </div>
</div>

@section Scripts{
    @Scripts.Render("~/scripts/date")
    <script type="text/javascript">
        BodyScroll = false;
        TabConentScroll=true;
        HasDivPageCon=true;
        var loadedExecLog=false;
        var applyToAll = '@((Model.ApplyTo==TaskTriggerApplyTo.所有).ToString().ToLower())' == 'true';
        var loadServerUrl = '@Url.Action("GetTriggerServers","Task")';
        var serverStateDic=new Object();
        var triggerServerRunStateDic=new Object();
        $(function () {
            serverStateDic=JSON.parse('@Html.Raw(JsonSerialize.ObjectToJson(serverStateValues))');
            triggerServerRunStateDic=JSON.parse('@Html.Raw(JsonSerialize.ObjectToJson(triggerServerRunStateValues))');
            var columns=[];
            if(!applyToAll){
                columns.push({ "title": '<input type="checkbox" class="cbx_all"/>', "targets": 0,"data":function ( row, type, val, meta ) {
                    return '<input type="checkbox" class="cbx_val" value="'+row.Server.Id+'"/>';
                },width:'20px',className:'txt-center' });
            }
            for(var i=0;i<5;i++)
            {
                switch (i)
                {
                    case 0:
                        if(!applyToAll){
                            columns.push({ "title": '<input type="checkbox" class="cbx_all"/>', "targets": 0,"data":function ( row, type, val, meta ) {
                                return '<input type="checkbox" class="cbx_val" value="'+row.Server.Id+'"/>';
                            },width:'20px',className:'txt-center' });
                        }
                        break;
                    case 1:
                        columns.push({ "title": '服务名称', "targets":(applyToAll?i-1:i),"data":'Server.Name',width:'150px'});
                        break;
                    case 2:
                        columns.push({ "title": '服务状态', "targets":(applyToAll?i-1:i),"data":function ( row, type, val, meta ){
                            return serverStateDic[row.Server.State];
                        },width:'100px',className:'txt-center'});
                        break;
                    case 3:
                        columns.push({ "title": '调度状态', "targets":(applyToAll?i-1:i),"data":function ( row, type, val, meta ){
                            return triggerServerRunStateDic[row.RunState];
                        },width:'100px',className:'txt-center'});
                        break;
                    //case 4:
                    //    columns.push({ "title": '上次运行', "targets":(applyToAll?i-1:i),"data":'LastFireDate',width:'130px',className:'txt-center'});
                    //    break;
                    //case 5:
                    //    columns.push({ "title": '下次运行', "targets":(applyToAll?i-1:i),"data":'NextFireDate',width:'130px',className:'txt-center'});
                    //    break;
                    case 4:
                        columns.push({ "title": '服务地址', "targets":(applyToAll?i-1:i),"data":'Server.Host'});
                        break;
                }
            }
            columns.push({ "title": "操作", "targets":(applyToAll?4:5) ,"data":function(row,type,val,meta){
                var menuItems=new Array();
                menuItems.push('<li><a href="javascript:void(0)" class="btn_serverdetail" serverno="_serverNo" servername="_serverName"><i class="glyphicon glyphicon-list-alt"></i> 详情</a></li>'.replace('_serverNo',row.Server.Id).replace('_serverName',row.Server.Name));
                if(!applyToAll)
                {
                    if(row.RunState==@((int)TaskTriggerServerRunState.运行)){
                        menuItems.push('<li><a href="javascript:void(0)" class="btn_serverdisable" serverno="_serverNo" servername="_serverName"><i class="glyphicon glyphicon-eye-close"></i> 停用</a></li>'.replace('_serverNo',row.Server.Id).replace('_serverName',row.Server.Name));
                }else{
                    menuItems.push('<li><a href="javascript:void(0)" class="btn_serverenable" serverno="_serverNo" servername="_serverName"><i class="glyphicon glyphicon-eye-open"></i> 启用</a></li>'.replace('_serverNo',row.Server.Id).replace('_serverName',row.Server.Name));
                }
                menuItems.push('<li><a href="javascript:void(0)" class="btn_serverdelete" serverno="_serverNo" servername="_serverName"><i class="glyphicon glyphicon-trash"></i> 移除</a></li>'.replace('_serverNo',row.Server.Id).replace('_serverName',row.Server.Name));
            }
                return '<div class="btn-group"><button type="button" class="btn btn-blue dropdown-toggle w-80" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">管  理 <span class="caret"></span></button><ul class="dropdown-menu list-dropdown-menu w-80">'+menuItems.join('')+'</ul></div>';
        },width:'80px',className:'txt-center'});
        InitDataTable({
            TableEle:'#server_table',
            'columnDefs':columns
        });

        InitDataTable({
            TableEle:'#exectlog_table',
            'columnDefs':[{'title':'服务节点',width:'150px',data:'Server.Name','targets':0},
                {'title':'服务地址',width:'200px',data:'Server.Host','targets':1},
                {'title':'开始时间',width:'130px',data:'BeginTime',className:'txt-center','targets':2,render:function(data, type, row, meta){
                    return  moment(data).format("YYYY-MM-DD HH:mm:ss");
                }},
                {'title':'开始时间',width:'130px',data:'EndTime',className:'txt-center','targets':3,render:function(data, type, row, meta){
                    return  moment(data).format("YYYY-MM-DD HH:mm:ss");
                }},
                {'title':'说明',data:'Message','targets':4},
            ],
            fixedColumns:{
                leftColumns:0,
                rightColumns:0
            }
        });

        LoadServers();
        //查看服务详情
        $("body").on('click', '.btn_serverdetail', function () {
            var sysNo = $.trim($(this).attr("serverno"));
            if (sysNo == "") {
                return;
            }
            var detailUrl = '@Url.Action("ServerNodeDetail", "Task", new { Id="sys_no"})'.replace('sys_no', sysNo);
            window.top.OpenNewTabPage(detailUrl, '服务详情');
        });
        //停用服务
        $("body").on("click", ".btn_serverdisable", function () {
            var serverNo = $.trim($(this).attr("serverno"));
            if (serverNo == "") {
                return;
            }
            var serverName = $.trim($(this).attr("servername"));
            ModifyServerRunState(serverNo,serverName,@((int)TaskTriggerServerRunState.停止));
        });
        //启用服务
        $("body").on("click", ".btn_serverenable", function () {
            var serverNo = $.trim($(this).attr("serverno"));
            if (serverNo == "") {
                return;
            }
            var serverName = $.trim($(this).attr("servername"));
            ModifyServerRunState(serverNo,serverName,@((int)TaskTriggerServerRunState.运行));
        });
        //移除服务
        $("body").on("click",".btn_serverdelete",function(){
            var serverNo = $.trim($(this).attr("serverno"));
            if (serverNo == "") {
                return;
            }
            var serverName = $.trim($(this).attr("servername"));
            RemoveJobServer([serverNo],serverName);
        });
        //移除选中服务
        $("#btn_delselectserver").click(function(){
            var serverNos=GetDataTableCheckedValues('#server_table');
            RemoveJobServer(serverNos,'');
        });
        //添加服务
        $("#btn_addserver").click(function () {
            DialogPage({
                url: '@Url.Action("ServerNodeMultipleSelect", "Task")',
                width: "600px",
                height: "400px",
                title: '选择服务节点',
                ok: false,
                cancel: null
            });
        });
        //删除执行计划
        $("#btn_delete").click(function(){
            DeleteTrigger();
        });
        //开启任务
        $("#btn_enable").click(function(){
            ModifyTriggerRunState(true);
        });
        //关闭任务
        $("#btn_disable").click(function(){
            ModifyTriggerRunState(false);
        });
        $("#btn_edit").click(function(){
            window.top.OpenNewTabPage('@Url.Action("EditTrigger", "Task",new {id=Model.Id})', '编辑执行计划');
        });
        //执行日志标签
        $("body").on('click','#tab_link_exectlog',function(){
            if(!loadedExecLog){
                LoadExecLog();
            }
        });
        });

        //加载计划执行服务节点
        function LoadServers() {
            if(applyToAll){
                var jobIds=new Array();
                jobIds.push('@(Model.Job?.Id)');
                var data={
                    Jobs:jobIds
                };
                $.post('@Url.Action("GetTriggerServersByJob","Task")',data,function(res){
                    ReplaceDataTableData("#server_table",JSON.parse(res.Datas));
                    $(window).resize();
                });
            }else{
                var serverKey = $.trim($("#search_servername").val());
                var triggerIds = new Array();
                triggerIds.push('@Model.Id');
                var data = {
                    ServerKey: serverKey,
                    Triggers: triggerIds
                };
                PageSearch({
                    url: loadServerUrl,
                    data: data,
                    listEle: "#server_table",
                    pagerEle: "#server_tabe_pager",
                    callback: function () {
                        //InitUI();
                    }
                });
            }
        }

        //修改服务承载运行状态
        function ModifyServerRunState(serverId, serverName, state) {
            if (!serverId || serverId == "") {
                return;
            }
            var enableState=state==@((int)TaskTriggerServerRunState.运行);
            var tipMsg = enableState?'启用后执行计划将会在该服务上调度执行,确认在服务【'+serverName+'】上启用该计划吗?':'停用后执行计划将会在该服务上停止执行,确认在服务【'+serverName+'】上停用该计划吗?';
            var triggerServers=new Array();
            triggerServers.push({
                Server:{
                    Id:serverId
                },
                Trigger:{
                    Id:'@Model.Id'
                },
                RunState:state
            });
            ConfirmMsg(tipMsg, function () {
                $.post('@Url.Action("ModifyTriggerServerState", "Task")', { triggerServers: triggerServers }, function (res) {
                    ResultMsg(res);
                    if (res.Success) {
                        LoadServers();
                    }
                });
            });
        }

        //移除承载服务
        function RemoveJobServer(serverIdArray,serverName){
            if(!serverIdArray||serverIdArray.length<=0){
                return;
            }
            var triggerServers=new Array();
            for(var s in serverIdArray)
            {
                triggerServers.push({
                    Server:{
                        Id:serverIdArray[s]
                    },
                    Trigger:{
                        Id:'@Model.Id'
                    }
                });
            }
            var tipMsg=serverIdArray.length==1&&serverName!=""?'移除服务后将停止计划在该服务上的调度执行,确认移除服务【'+serverName+'】吗?':"移除服务后将停止计划在该服务上的调度执行,确认移除吗?";
            ConfirmMsg(tipMsg, function () {
                $.post('@Url.Action("DeleteTriggerServers", "Task")', { triggerServers: triggerServers }, function (res) {
                    ResultMsg(res);
                    if (res.Success) {
                        LoadServers();
                    }
                });
            });
        }

        //获取选中的服务
        function GetSelectServers() {
            var checkedValues = new Array();
            $("#server_tabe_page_list .table_cbox").each(function (i, e) {
                if (e.checked) {
                    var nowValue = $.trim($(e).val());
                    if (nowValue != "") {
                        checkedValues.push(nowValue);
                    }
                }
            });
            return checkedValues;
        }

        //选择回调
        function ServerNodeMultipleSelectCallback(servers) {
            if (!servers) {
                return;
            }
            var triggerServers = new Array();
            for (var s in servers) {
                var nowServer = servers[s];
                triggerServers.push({
                    Server: {
                        Id: nowServer.Id
                    },
                    Trigger: {
                        Id: '@Model.Id'
                    },
                    RunState:'@((int)TaskTriggerServerRunState.运行)'
                });
            }
            $.post('@Url.Action("SaveTriggerServer","Task")', { triggerServers: triggerServers }, function (res) {
                ResultMsg(res);
                if (res.Success) {
                    LoadServers();
                }
            });
        }

        //删除执行计划
        function DeleteTrigger(){
            ConfirmMsg('删除后将不能恢复,确认删除该执行计划吗?', function () {
                var ids=['@Model.Id'];
                $.post('@Url.Action("RemoveTrigger", "Task")', { triggerIds:ids }, function (res) {
                    ResultMsg(res);
                    if (res.Success) {
                        window.top.CloseCurrentPage();
                    }
                });
            });
        }

        //修改执行计划状态
        function ModifyTriggerRunState(state){
            var tipMsg=state?'计划开启后将会在服务上开始调度执行,确认开启吗?':"计划关闭后将会停止所有调度服务上的执行,确认关闭吗?";
            var data=[{Id:'@Model.Id',State:(state?'@((int)TaskTriggerState.运行)':'@((int)TaskTriggerState.停止)')}];
            ConfirmMsg(tipMsg, function () {
                $.post('@Url.Action("ModifyTriggerState", "Task")', { triggers:data }, function (res) {
                    ResultMsg(res);
                    if (res.Success) {
                        window.top.RefreshCurrentPage();
                    }
                });
            });
        }

        //加载任务执行日志
        function LoadExecLog(){
            var beginTime=$.trim($("#search_execlogbegintime").val());
            var endTime=$.trim($("#search_execlogendtime").val());
            var data={
                Trigger:'@Model.Id',
                BeginTime:beginTime,
                EndTime:endTime
            };
            PageSearch({
                url: '@Url.Action("SearchTriggerExecuteLog", "Task")',
                data: data,
                listEle: "#exectlog_table",
                pagerEle: "#exectlog_tabe_pager",
                callback: function () {
                }
            });
        }
    </script>
}



